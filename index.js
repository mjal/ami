// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Options, Search, alias, default_site, default_template, do_search, input, sites;
    sites = {
      "google": function(query) {
        return "https://www.google.fr/search?q=" + query;
      },
      "google.com": function(query) {
        return "https://www.google.com/search?q=" + query;
      },
      "wikipedia": function(query) {
        return "http://fr.wikipedia.org/w/index.php?search=" + query;
      },
      "wikipedia.com": function(query) {
        return "http://www.wikipedia.org/w/index.php?search=" + query;
      },
      "youtube": function(query) {
        return "https://www.youtube.com/results?search_query=" + query;
      },
      "duckduckgo": function(query) {
        return "https://duckduckgo.com/?q=" + query;
      },
      "soundcloud": function(query) {
        return "https://soundcloud.com/search?q=" + query;
      }
    };
    alias = {
      "g": "google",
      "gfr": "google",
      "gus": "google.com",
      "w": "wikipedia",
      "wfr": "wikipedia",
      "wus": "wikipedia.com",
      "ddg": "duckduckgo",
      "sc": "soundcloud",
      "yt": "youtube"
    };
    default_site = "duckduckgo";
    default_template = sites[default_site];
    do_search = function(query) {
      var bang, request, template;
      template = default_template;
      request = query.match(/^(.*)?\!(\w+)( .*)?/);
      if (request) {
        bang = request[2];
        query = request[1];
        if (request[3]) {
          query += request[3];
        }
        if (bang && sites[bang]) {
          template = sites[bang];
        }
        if (bang && alias[bang]) {
          template = sites[alias[bang]];
        }
      }
      return window.location.href = template(query.replace(/\s+/g, ' '));
    };
    input = window.location.search;
    if (input && input.charAt(0) === "?" && input.charAt(1) === "q" && input.charAt(2) === "=") {
      return do_search(input.substring(3).replace(/\+/g, " ").replace(/\/$/, ""));
    } else {
      Search = (function(_super) {
        __extends(Search, _super);

        function Search() {
          this.keypress = __bind(this.keypress, this);
          Search.__super__.constructor.apply(this, arguments);
          this.html($("#tpl_main").html());
          this.$("#search_input").focus();
        }

        Search.prototype.events = {
          "keypress #search_input": "keypress",
          "click #search_button": "search",
          "click #options_button": "show_options"
        };

        Search.prototype.keypress = function(e) {
          if (e.keyCode === 13) {
            return this.search();
          }
        };

        Search.prototype.search = function() {
          return do_search(this.$("#search_input").val());
        };

        Search.prototype.show_options = function() {
          return $("#options").show();
        };

        return Search;

      })(Spine.Controller);
      Options = (function(_super) {
        __extends(Options, _super);

        Options.prototype.template = _.template($("#tpl_options").html());

        function Options() {
          Options.__super__.constructor.apply(this, arguments);
          this.html(this.template({
            sites: sites,
            default_site: default_site
          }));
        }

        return Options;

      })(Spine.Controller);
      new Search({
        el: $("#main")
      });
      return new Options({
        el: $("#options")
      });
    }
  });

}).call(this);
